const { addressBook } = require("blockchain-addressbook");
const SPA = "0x5602df4A94eB6C680190ACCFA2A475621E0ddBdc";
const SPA_STAKER = "0xbd39045344cD9b8FB4622959725D65e49dB2D090";
const STAKED_SPA = "0x8e2549225E21B1Da105563D419d5689b80343E01";
const SPA_STAKE_MANAGER = "0x9863056b4bdb32160a70107a6797dd06b56e8137";
const SPA_DAI_PAIR = "0xFa5a5F0bC990Be1D095C5385Fff6516F6e03c0a7";
const DAI_BOND = "0x5D449738986ab34280373502031D1513581Cb649";
const WFTM_BOND = "0x7E1FaF28a0Ed1A736765d29eD9a985A4D921E1d4";
const SPA_DAI_BOND = "0x8927a01AcBb4820f848711e2B7353d62172053b9";
const DAI_WFTM_PAIR = "0xe120ffbda0d14f3bb6d6053e90e63c572a66a428";
const SPA_DAI_BOND_CALCULATOR = "0x5ddd235421e4c27c84f26a43b5a1ad657e64ed61";
const SPA_TREASURY = "0x8CFA87aD11e69E071c40D58d2d1a01F862aE01a8";

const {
  SCREAM: { address: SCREAM },
  fUSDT: { address: fUSDT },
  WFTM: { address: WFTM },
  ETH: { address: ETH },
  WBTC: { address: WBTC },
  DAI: { address: DAI },
} = addressBook.fantom.tokens;

const SPA_DAI_ROUTE = [SPA, DAI];
const DAI_SPA_ROUTE = [DAI, SPA];
const WFTM_SPA_ROUTE = [WFTM, DAI, SPA];
const SPA_WFTM_ROUTE = [SPA, DAI, WFTM];

const TOKEN_ADDR_TO_NAME = {
  [DAI]: "DAI",
  [SPA]: "SPA",
  [WFTM]: "WFTM",
};

const SLOW_TEST_FLAG = "SLOW > ";
const SKIP_TEST_FLAG = "SKIP > ";

/*
 * Bogus addresses for testing/local-deploy:
 *    1 - Address #1 (not #0) on hardhat local
 *    2 - Address #2 on hardhat local
 *    3 - Address #3 on hardhat local
 */
const BOGUS_ADDR_1 = "0x70997970c51812dc3a010c7d01b50e0d17dc79c8";
const BOGUS_ADDR_2 = "0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc";
const BOGUS_ADDR_3 = "0x90f79bf6eb2c4f870365e785982e1f101e93b906";

// Often there are moderate network delays in tests
const TEST_TIMEOUT = 3 * 60 * 1000; // 3 minutes

// Private key for local hardhat network account #0
const LOCAL_ACC_PRIVATE =
  "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";
// Address for local hardhat network account #0
const LOCAL_ACC_ADDR = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266";

// Addresses for whales, for large value tests
const SPA_WHALE_ADDR = "0x726e4612ea921b9ab2ae0194133862834e4af48e";
const SPA_WHALE_2_ADDR = "0xb3bfb32977cfd6200ab9537e3703e501d8381c9b";
const SPA_WHALE_3_ADDR = "0xe96247ee726d547b7fddf42f201ebc5011909421";
const SPA_WHALE_4_ADDR = "0x2ded933b1588da379fbe9e4d5f09eda2d5d3f564";
const SPA_WHALE_5_ADDR = "0x2ded933b1588da379fbe9e4d5f09eda2d5d3f564";
const SPA_WHALE_6_ADDR = "0x091f50e9954e6a39d2a7e673bc2b433c9b42847e";
const SPA_WHALE_7_ADDR = "0x5d157ffa22075c8ab4fe8db9ab643fc9aa7078db";
const SPA_WHALE_8_ADDR = "0xed1cea472ddd185dd136fcdb86898e89d2519298";
const SPA_WHALE_9_ADDR = "0xf2b41da8ceeba8abe37383464642590c9af06fbd";
const SPA_WHALE_10_ADDR = "0x6c71e84f8eb0229aed88cd09a2ceee18a60983df";
const SPA_WHALE_11_ADDR = "0x0fa0a7f22ef9dd169320d3d979ec68f43b34f2ee";
const SPA_WHALE_12_ADDR = "0xc534b26d012a65601b9413733b1e949c25aaa29a";
const SPA_WHALE_13_ADDR = "0x8df9cf06156f18144d1695abec2da5f355bac040";
const SPA_WHALE_14_ADDR = "0x7ed7888f3bf70ed07f94fd7381d39476928331f7";
const SPA_WHALE_15_ADDR = "0x291bf1b784b8663cf670db402d83406a80853740";
const SPA_WHALE_16_ADDR = "0x7df995aa3f301ba343bd9093773e236b75e31c04";
const SPA_WHALE_17_ADDR = "0x3714261a34c6e864b267f01dfe79ab9c5e10bb16";
const SPA_WHALE_18_ADDR = "0x0f4ea0b0dc3bf50171c3fd3e4a134757b5ac2332";
const SPA_WHALE_19_ADDR = "0x508a3c644b887c2875b19e26318dfda977db9d05";
const SPA_WHALE_20_ADDR = "0x0052b42e1f2ad09fdcf6b3eb331bedabf0ccdd45";
const FTM_WHALE_ADDR = "0xF977814e90dA44bFA03b6295A0616a897441aceC";

const SPA_WHALES = [
  SPA_WHALE_ADDR,
  SPA_WHALE_2_ADDR,
  SPA_WHALE_3_ADDR,
  SPA_WHALE_4_ADDR,
  SPA_WHALE_5_ADDR,
  SPA_WHALE_6_ADDR,
  SPA_WHALE_7_ADDR,
  SPA_WHALE_8_ADDR,
  SPA_WHALE_9_ADDR,
  SPA_WHALE_10_ADDR,
  SPA_WHALE_11_ADDR,
  SPA_WHALE_12_ADDR,
  SPA_WHALE_13_ADDR,
  SPA_WHALE_14_ADDR,
  SPA_WHALE_15_ADDR,
  SPA_WHALE_16_ADDR,
  SPA_WHALE_17_ADDR,
  SPA_WHALE_18_ADDR,
  SPA_WHALE_19_ADDR,
  SPA_WHALE_20_ADDR,
];

const ZERO_ADDR = "0x0000000000000000000000000000000000000000";

const REBASE_PERIOD_SECONDS = 8 * 60 * 60; // 8 hours
const REBASE_PERIOD_BLOCKS = 33333; // Assuming 100,000 blocks per day
const SHORTEST_BOND_LENGTH = 10000;

module.exports = {
  SPA,
  DAI,
  SPA_STAKER,
  STAKED_SPA,
  SPA_STAKE_MANAGER,
  SPA_TREASURY,
  SPA_DAI_PAIR,
  BOGUS_ADDR_1,
  BOGUS_ADDR_2,
  BOGUS_ADDR_3,
  TEST_TIMEOUT,
  DAI_BOND,
  WFTM_BOND,
  SPA_DAI_BOND,
  LOCAL_ACC_PRIVATE,
  LOCAL_ACC_ADDR,
  FTM_WHALE_ADDR,
  SPA_WHALE_ADDR,
  TOKEN_ADDR_TO_NAME,
  DAI_SPA_ROUTE,
  SPA_DAI_ROUTE,
  WFTM_SPA_ROUTE,
  SPA_WFTM_ROUTE,
  SPA_WHALES,
  DAI_WFTM_PAIR,
  REBASE_PERIOD_SECONDS,
  REBASE_PERIOD_BLOCKS,
  SLOW_TEST_FLAG,
  SKIP_TEST_FLAG,
  WFTM,
  ZERO_ADDR,
  SHORTEST_BOND_LENGTH,
  SPA_DAI_BOND_CALCULATOR,
};
